// Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cache (interfaces: CredentialsCache)

package mock_cache

import (
	cache "github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cache"
	gomock "github.com/golang/mock/gomock"
)

// Mock of CredentialsCache interface
type MockCredentialsCache struct {
	ctrl     *gomock.Controller
	recorder *_MockCredentialsCacheRecorder
}

// Recorder for MockCredentialsCache (not exported)
type _MockCredentialsCacheRecorder struct {
	mock *MockCredentialsCache
}

func NewMockCredentialsCache(ctrl *gomock.Controller) *MockCredentialsCache {
	mock := &MockCredentialsCache{ctrl: ctrl}
	mock.recorder = &_MockCredentialsCacheRecorder{mock}
	return mock
}

func (_m *MockCredentialsCache) EXPECT() *_MockCredentialsCacheRecorder {
	return _m.recorder
}

func (_m *MockCredentialsCache) Clear() {
	_m.ctrl.Call(_m, "Clear")
}

func (_mr *_MockCredentialsCacheRecorder) Clear() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clear")
}

func (_m *MockCredentialsCache) Get(_param0 string) *cache.AuthEntry {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(*cache.AuthEntry)
	return ret0
}

func (_mr *_MockCredentialsCacheRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockCredentialsCache) List() []*cache.AuthEntry {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]*cache.AuthEntry)
	return ret0
}

func (_mr *_MockCredentialsCacheRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List")
}

func (_m *MockCredentialsCache) Set(_param0 string, _param1 *cache.AuthEntry) {
	_m.ctrl.Call(_m, "Set", _param0, _param1)
}

func (_mr *_MockCredentialsCacheRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1)
}
